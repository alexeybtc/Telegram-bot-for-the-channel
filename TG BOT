import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ChatJoinRequestHandler, ContextTypes
import os

# Bot Functionality:
# 1. Sends a text message with a video link when the /start command is received.
# 2. Saves the username of the person who sent /start (with @) to a file, avoiding duplicates.
# 3. Automatically approves join requests to a private Telegram channel. The bot must be an administrator in the channel

# Enable logging for debugging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Specify the bot token (get it from @BotFather)
TOKEN = 'YOUR_BOT_TOKEN_HERE'

# Path to the file for storing user tags
USER_FILE = 'users.txt'

# Function for the /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    username = user.username  # Get the user's tag (without @)
    
    # Text with a link to the video
    welcome_message = (
        "Hello! Here is the link to the video:\n"
        "https://www.youtube.com/watch?v=example_video"
    )
    
    # Send the message
    await update.message.reply_text(welcome_message)
    
    # Save the user's tag with @ to the file if it's not already there
    if username:  # Check if the user has a username
        save_username(f"@{username}")

# Function to save the tag to the file
def save_username(username_with_at: str) -> None:
    # Create the file if it doesn't exist
    if not os.path.exists(USER_FILE):
        with open(USER_FILE, 'w', encoding='utf-8') as f:
            f.write('')
    
    # Read existing tags
    with open(USER_FILE, 'r', encoding='utf-8') as f:
        existing_users = f.read().splitlines()
    
    # If the tag already exists, don't add it
    if username_with_at in existing_users:
        logger.info(f"Tag {username_with_at} already exists in the file")
        return
    
    # Add the new tag
    with open(USER_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{username_with_at}\n")
    logger.info(f"Tag {username_with_at} added to the file")

# Function to automatically approve join requests to the channel
async def approve_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_join_request = update.chat_join_request
    chat_id = chat_join_request.chat.id
    user_id = chat_join_request.from_user.id
    
    try:
        # Approve the join request
        await context.bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
        logger.info(f"Join request from user {user_id} to channel {chat_id} approved")
    except Exception as e:
        logger.error(f"Error approving join request: {e}")

# Main function to run the bot
def main() -> None:
    # Create the application
    application = Application.builder().token(TOKEN).build()

    # Register the /start command handler
    application.add_handler(CommandHandler("start", start))
    
    # Register the join request handler
    application.add_handler(ChatJoinRequestHandler(approve_join_request))

    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
